{"version":3,"sources":["../node_modules/pdfjs-dist/build sync","assets/pdf/The_Curse_Of_C-19 .pdf","assets/images/DS_Logo_Yellow.png","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Loader","className","pdfjs","GlobalWorkerOptions","workerSrc","version","App","innerHeight","window","innerWidth","useState","numPages","setNumPages","setHeight","width","setWidth","pageNumber","setPageNumber","loading","setLoading","useEffect","addEventListener","console","log","dimensions","src","img","style","maxWidth","alt","file","pdfFile","onLoadSuccess","onClick","href","class","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,mBCRzBF,EAAOC,QAAU,IAA0B,gD,mBCA3CD,EAAOC,QAAU,IAA0B,4C,ySCQ3C,SAASE,IACP,OACE,yBAAKC,UAAU,cAAa,8BAAW,+BAJ3CC,QAAMC,oBAAoBC,UAA1B,kDAAiFF,QAAMG,QAAvF,kBAiEeC,MAzDf,WACE,IAAMC,EAAmC,GAArBC,OAAOD,YACrBE,EAAaD,OAAOC,WAAa,IAA0B,GAApBD,OAAOC,WAAmB,KAF1D,EAIiBC,mBAAS,MAJ1B,mBAIRC,EAJQ,KAIEC,EAJF,OAKaF,mBAASH,GALtB,mBAKAM,GALA,aAMWH,mBAASD,GANpB,mBAMRK,EANQ,KAMDC,EANC,OAOqBL,mBAAS,GAP9B,mBAORM,EAPQ,KAOIC,EAPJ,OAQeP,oBAAS,GARxB,mBAQRQ,EARQ,KAQCC,EARD,KASbC,qBAAU,WACRZ,OAAOa,iBAAiB,qBAAqB,SAAC7B,GAC9B,OAAVsB,IACFD,EAA+B,GAArBL,OAAOD,aACjBQ,EAA6B,GAApBP,OAAOC,aAElBa,QAAQC,IAAI,6BAGhB,IAAMC,EAAuB,OAAVV,EAAiB,CAAEA,MAAOA,GAAU,GAMvD,OACE,yBAAKb,UAAU,2EACXiB,GACA,yBAAKjB,UAAU,aACb,yBAAKwB,IAAKC,EAAKzB,UAAU,kBAAkB0B,MAAO,CAAEC,SAAU,KAAOC,IAAI,UAE7E,yBAAK5B,UAAU,yDACb,kBAAC,WAAD,CACE6B,KAAMC,EACNC,cAbsB,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAC/BC,EAAYD,GACZQ,GAAW,IAYLD,QAAS,kBAAClB,EAAD,OAET,kBAAC,OAAD,eAAMgB,WAAYA,GAAgBQ,EAAlC,CAA8CN,QAAS,kBAAClB,EAAD,WAEvDkB,GACA,yBAAKjB,UAAU,qEACb,uBAAGA,UAAU,OAAOgC,QAAS,kBAAMjB,EAAa,GAAKC,EAAcD,EAAa,KAC9E,uBAAGf,UAAU,yBAEf,2BAAIe,EAAJ,OAAoBL,GACpB,uBAAGV,UAAU,QAAQgC,QAAS,kBAAMjB,EAAaL,GAAYM,EAAcD,EAAa,KACtF,uBAAGf,UAAU,4BAKrB,yBAAKA,UAAU,mEACb,uBAAGiC,KAAK,iCAAR,6BAAqE,0BAAMjC,UAAU,QAAhB,KADvE,IACuG,uBAAGA,UAAU,OAAb,cAA8B,uBAAGkC,MAAM,iBAAvC,OAA8D,uBAAGD,KAAK,8BAAR,eCrDvJE,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.d619df65.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 22;","module.exports = __webpack_public_path__ + \"static/media/The_Curse_Of_C-19 .917b7402.pdf\";","module.exports = __webpack_public_path__ + \"static/media/DS_Logo_Yellow.393be798.png\";","import React, { useState, useEffect } from 'react';\n\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport './App.css';\nimport * as pdfFile from './assets/pdf/The_Curse_Of_C-19 .pdf';\nimport * as img from './assets/images/DS_Logo_Yellow.png'\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nfunction Loader() {\n  return (\n    <div className=\"lds-ripple\"><div></div><div></div></div>\n  )\n}\n\nfunction App() {\n  const innerHeight = window.innerHeight * 0.9;\n  const innerWidth = window.innerWidth < 500 ? window.innerWidth * 0.9 : null;\n\n  let [numPages, setNumPages] = useState(null);\n  let [height, setHeight] = useState(innerHeight);\n  let [width, setWidth] = useState(innerWidth);\n  let [pageNumber, setPageNumber] = useState(1);\n  let [loading, setLoading] = useState(true);\n  useEffect(() => {\n    window.addEventListener('orientationchange', (e) => {\n      if (width !== null) {\n        setHeight(window.innerHeight * 0.8);\n        setWidth(window.innerWidth * 0.9);\n      }\n      console.log('Orientation changed')\n    })\n  })\n  const dimensions = width !== null ? { width: width } : {}\n\n  const onDocumentLoadSuccess = ({ numPages }) => {\n    setNumPages(numPages);\n    setLoading(false)\n  }\n  return (\n    <div className=\"App d-flex flex-column h-100 justify-content-center align-items-center\">\n      {!loading &&\n        <div className=\"px-5 mt-4\">\n          <img src={img} className=\"img-fluid w-100\" style={{ maxWidth: 315 }} alt=\"logo\" />\n        </div>}\n      <div className=\"flex-grow-1 d-flex flex-column justify-content-center\">\n        <Document\n          file={pdfFile}\n          onLoadSuccess={onDocumentLoadSuccess}\n          loading={<Loader />}\n        >\n          <Page pageNumber={pageNumber} {...dimensions} loading={<Loader />} />\n        </Document>\n        {!loading &&\n          <div className=\"d-flex align-items-center justify-content-center american-silver \">\n            <p className=\"mx-2\" onClick={() => pageNumber > 1 && setPageNumber(pageNumber - 1)}>\n              <i className=\"fas fa-chevron-left\"></i>\n            </p>\n            <p>{pageNumber} of {numPages}</p>\n            <p className=\"mx-2 \" onClick={() => pageNumber < numPages && setPageNumber(pageNumber + 1)}>\n              <i className=\"fas fa-chevron-right\"></i>\n            </p>\n          </div>}\n      </div>\n\n      <div className=\"d-flex w-100 justify-content-center px-2 footer american-silver\">\n        <a href=\"http://www.dreamsketchers.in/\">Dreamsketchers Media LLP.</a><span className=\"mx-2\">|</span> <p className=\"m-0\">built with <i class=\"fas fa-heart\"></i> by <a href=\"https://github.com/valindo\">Valindo</a></p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}